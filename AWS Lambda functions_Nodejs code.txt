const AWS = require("aws-sdk");
//const crypto = require("crypto");

// Generate unique id with no external dependencies
//const generateUUID = () => crypto.randomBytes(16).toString("hex");

// Initialising the DynamoDB SDK
const documentClient = new AWS.DynamoDB.DocumentClient();

exports.handler = async event => {
  const { itemName, id, price } = event;
  const params = {
    TableName: "menu", // The name of your DynamoDB table
    Item: { // Creating an Item with a unique id and with the passed title
      id: id,
      itemName: itemName,
      price: price
    }
  };
  try {
    // Utilising the put method to insert an item into the table (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.NodeJs.03.html#GettingStarted.NodeJs.03.01)
    const data = await documentClient.put(params).promise();
    const response = {
      statusCode: 200
    };
    return response; // Returning a 200 if the item has been inserted 
  } catch (e) {
    return {
      statusCode: 500,
      body: JSON.stringify(e)
    };
  }
};

----------------------------------------------------------------------------------------------------------


const AWS = require("aws-sdk");
const crypto = require("crypto");

// Generate unique id with no external dependencies
//const generateUUID = () => crypto.randomBytes(16).toString("hex");

// Initialising the DynamoDB SDK
const documentClient = new AWS.DynamoDB.DocumentClient();

exports.handler = async event => {
    console.log('event: ', event)
  const {pathParameters: { id }} = event;
  const params = {
    TableName: "menu", // The name of your DynamoDB table
    Key: { id }
  };
  try {
    // Utilising the put method to insert an item into the table (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.NodeJs.03.html#GettingStarted.NodeJs.03.01)
    const data = await documentClient.delete(params).promise();
    const response = {
      statusCode: 200
    };
    return response; // Returning a 200 if the item has been inserted 
  } catch (e) {
    return {
      statusCode: 500,
      body: JSON.stringify(e)
    };
  }

-----------------------------------------------------------------------------------------------------------



const AWS = require("aws-sdk");
const documentClient = new AWS.DynamoDB.DocumentClient();

exports.handler = async event => {
  const params = {
    TableName: "menu" // The name of your DynamoDB table
  };
  try {
    // Utilising the scan method to get all items in the table
    const data = await documentClient.scan(params).promise();
    const response = data.Items
    return response;
  } catch (e) {
    return {
      statusCode: 500
    };
  }
};



-------------------------------------------------------------------------------------


const AWS = require("aws-sdk");
const crypto = require("crypto");

// Generate unique id with no external dependencies
//const generateUUID = () => crypto.randomBytes(16).toString("hex");

// Initialising the DynamoDB SDK
const documentClient = new AWS.DynamoDB.DocumentClient();

exports.handler = async event => {
  const { username, password } = event;
  const params = {
    TableName: "users", 
  };
  try {
    // Utilising the put method to insert an item into the table (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.NodeJs.03.html#GettingStarted.NodeJs.03.01)
    const data = await documentClient.scan(params).promise();
    console.log(data);
    
    let response = {authenticated: false};
    
    data.Items.forEach(user => {
        if(user.username === username && user.password === password) {
            response.authenticated = true;
            response.userDetails = user;
            return;
        }
    })
    
    return response; // Returning a 200 if the item has been inserted 
  } catch (e) {
    return {
      statusCode: 500,
      body: JSON.stringify(e)
    };
  }
};



